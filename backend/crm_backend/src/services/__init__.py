"""
M√≥dulo de servi√ßos do CRM JT Telecom
"""
import logging

logger = logging.getLogger(__name__)

# Importar servi√ßos com tratamento de erro
try:
    from .auth_service import AuthService
    logger.info("‚úÖ AuthService importado")
except Exception as e:
    logger.error(f"‚ùå Erro ao importar AuthService: {e}")
    
    # Criar classe b√°sica como fallback
    class AuthService:
        def __init__(self):
            pass
        
        def authenticate(self, email, password):
            return {"success": False, "error": "Servi√ßo n√£o dispon√≠vel"}

try:
    from .email_service import EmailService
    logger.info("‚úÖ EmailService importado")
except Exception as e:
    logger.error(f"‚ùå Erro ao importar EmailService: {e}")
    
    # Criar classe b√°sica como fallback
    class EmailService:
        def __init__(self):
            pass
        
        def send_email(self, to, subject, body):
            return {"success": False, "error": "Servi√ßo n√£o dispon√≠vel"}

try:
    from .automation_service import AutomationEngine
    logger.info("‚úÖ AutomationEngine importado")
except Exception as e:
    logger.error(f"‚ùå Erro ao importar AutomationEngine: {e}")
    
    # Criar classe b√°sica como fallback
    class AutomationEngine:
        def __init__(self):
            pass
        
        def execute_rule(self, rule_id):
            return {"success": False, "error": "Servi√ßo n√£o dispon√≠vel"}

try:
    from .analytics_service import AnalyticsService
    logger.info("‚úÖ AnalyticsService importado")
except Exception as e:
    logger.error(f"‚ùå Erro ao importar AnalyticsService: {e}")
    
    # Criar classe b√°sica como fallback
    class AnalyticsService:
        def __init__(self):
            pass
        
        def get_dashboard_overview(self, tenant_id, user_id):
            return {"leads": 0, "opportunities": 0, "tasks": 0, "revenue": 0}

try:
    from .telephony_service import TelephonyService
    logger.info("‚úÖ TelephonyService importado")
except Exception as e:
    logger.error(f"‚ùå Erro ao importar TelephonyService: {e}")
    
    # Criar classe b√°sica como fallback
    class TelephonyService:
        def __init__(self):
            pass
        
        def make_call(self, from_number, to_number, user_id, lead_id=None):
            return {"success": False, "error": "Servi√ßo n√£o dispon√≠vel"}

# Exportar todos os servi√ßos
__all__ = [
    'AuthService', 'EmailService', 'AutomationEngine',
    'AnalyticsService', 'TelephonyService'
]

def init_services():
    """Inicializar todos os servi√ßos"""
    try:
        # Instanciar servi√ßos globais se necess√°rio
        logger.info("üöÄ Inicializando servi√ßos...")
        
        # Verificar se os servi√ßos est√£o funcionando
        auth_service = AuthService()
        email_service = EmailService()
        automation_engine = AutomationEngine()
        analytics_service = AnalyticsService()
        telephony_service = TelephonyService()
        
        logger.info("‚úÖ Todos os servi√ßos inicializados com sucesso")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao inicializar servi√ßos: {e}")
        return False

logger.info(f"üéâ M√≥dulo de servi√ßos inicializado com {len(__all__)} classes")

